/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 16.03.2023 00:50:42

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ 9,6,-18,-8,-5,-38,30,35,18,37,46,25,50,62,25,-57,-21,-26,18,26,-45,-10,-11,32,-20,-49,-66,-68,-21,-83,-114,-9,-85,-63,-43,-14,13,46,72,-17, 24,9,21,-48,-39,-15,34,-1,2,44,68,13,32,32,-9,-4,1,-17,34,16,-8,-25,-12,-8,-21,-71,-63,-81,-18,-40,-118,-25,-67,-80,-85,-55,17,46,33,-38, 1,-14,-6,-49,-43,-15,14,4,-3,43,44,21,55,-9,-9,4,-18,14,-31,30,6,-19,-11,-9,-10,-35,-46,-78,-18,-7,-127,-65,-67,-82,-90,-36,26,54,51,-67, 
  /* [1][0][][] */ -17,-49,-81,-88,-23,-11,16,-69,-68,9,-29,-105,46,17,-70,0,-57,-12,-2,-60,-109,26,-67,-105,17,-20,-35,-35,-102,20,-58,-91,-17,-89,-87,-103,-28,-4,65,63, -80,-21,-39,-13,-84,37,49,-60,16,9,-62,12,-101,-89,-84,-106,-67,10,-70,-77,-16,30,38,-2,3,-32,-74,-109,-80,-33,-87,23,-9,-37,-102,-8,-103,47,114,107, -113,-48,-31,33,-1,-79,-25,-85,4,-22,-87,-65,27,-3,-94,8,-58,-111,-83,-108,-91,-91,-87,-14,-56,-51,-15,-122,-5,-76,-127,-37,12,-16,-58,-42,13,40,65,-16, 
  /* [2][0][][] */ -27,-93,-81,60,-119,-103,-120,46,-28,-83,-39,97,82,20,-25,-98,5,-45,-19,4,-123,-37,-60,43,-59,-26,-11,-70,-89,-25,-64,28,72,-66,-39,29,-35,-68,-5,-37, -87,-105,-83,10,-78,56,-70,-119,-10,-58,60,-71,125,-26,7,4,53,-59,-105,-20,-79,-67,-110,-18,-32,-5,-99,77,8,-13,-7,36,27,-20,-4,-55,70,11,-62,-28, -118,-106,59,-35,34,-98,66,24,-64,-44,69,-69,82,108,14,-9,-29,-32,-24,-98,51,-89,-85,-55,-76,-20,64,8,-65,-102,2,27,91,-1,-15,66,20,-112,49,-127, 
  /* [3][0][][] */ -124,66,-49,83,82,-105,-37,39,-49,-10,-18,-30,1,66,42,-76,9,-22,-107,-63,-5,57,80,-98,60,-20,-38,-42,-70,33,2,-5,-25,-62,-44,-4,-77,72,-28,-98, -44,-14,-4,-103,48,77,38,-12,-70,47,-127,13,-52,-109,-87,77,-21,67,-32,-106,-41,46,53,-106,-48,-10,-35,-20,16,23,65,-80,-108,58,-8,-16,-108,-116,67,-104, -13,-91,81,-89,25,-45,36,-5,8,-71,-13,25,55,-13,27,-101,59,37,30,51,-15,-68,-100,-114,-71,-43,-114,79,-88,-27,-86,-99,-76,64,45,60,-118,-32,60,76, 
  /* [4][0][][] */ -24,10,-61,40,70,-71,-8,-12,-49,16,26,26,12,70,6,-30,20,-53,-65,-59,-57,-69,-39,-112,-52,-26,-44,-73,-10,-117,-54,-72,15,-84,-113,-117,-10,-14,-101,-19, -82,18,-37,17,60,-6,-114,-94,6,-6,13,-76,-77,-16,-77,-29,63,-62,-95,-9,-70,-97,-95,-3,-36,3,-89,-12,-48,-49,15,16,-70,-55,-3,-67,-26,-115,-32,-44, -63,-81,-2,37,52,-40,-97,-68,-16,-12,7,-65,41,12,-34,-71,-74,-34,-28,-34,-43,-66,-14,-119,-15,-118,-67,-41,-35,-127,-120,-49,-49,-65,-52,-21,-31,-32,-6,21, 
  /* [5][0][][] */ 95,17,21,39,34,-30,11,8,49,12,38,21,26,52,13,0,-4,30,16,-21,25,27,4,-7,-23,-6,34,8,31,-7,17,40,-52,-43,41,123,19,-27,-40,-111, -92,-77,-85,-15,-48,-93,-26,-20,-17,9,-33,-40,-32,-27,6,-29,-29,-42,6,-35,-30,-33,-78,-33,-24,16,38,33,26,9,15,36,-2,5,100,127,4,33,-13,-86, 28,-9,-24,-19,12,-67,21,27,48,7,34,45,27,51,29,23,9,-4,33,-19,16,5,-12,-4,9,21,24,32,70,7,-8,9,-53,-53,96,81,14,-7,-28,-58, 
  /* [6][0][][] */ -14,19,10,-40,-26,-47,51,38,-51,75,46,54,-47,-51,31,72,24,-87,-116,-125,-57,57,-96,-99,-104,-47,-127,-61,19,63,-2,-19,17,-2,-44,-27,-32,-83,-42,78, -48,-12,-5,8,-10,-75,-26,-39,-22,19,27,47,-8,-13,-46,-6,-52,-17,-24,-1,-2,45,-12,-25,-122,-67,-49,-8,20,-60,40,39,-23,-35,80,8,9,4,4,-36, 3,55,48,10,12,-32,-33,-44,3,92,82,59,6,28,-28,-60,-85,-57,-65,-35,46,37,-2,-8,-57,-44,-9,20,36,-16,83,96,40,76,123,57,44,15,26,-48, 
  /* [7][0][][] */ 15,33,42,7,5,-55,9,27,39,69,38,-45,-4,47,-83,-61,-16,-17,73,1,37,19,127,68,30,-7,5,-66,23,65,-39,24,65,-27,-14,51,7,-5,33,17, 19,-20,-23,31,-5,-83,-37,-38,35,6,2,-41,-45,-23,-73,-72,-40,-58,29,-10,-6,22,118,19,-8,-25,5,-77,1,45,-26,18,43,-3,-57,18,-52,10,-7,-26, -32,-23,-21,-29,-8,-87,-3,-1,20,57,30,-35,-18,45,-46,-18,4,-14,25,30,35,44,104,15,-26,-20,24,-79,-62,38,-52,-33,14,-35,-50,64,-42,-56,-34,-29, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0089735714718699455, 0.0024871488567441702, 0.0021408789325505495, 0.0019606049172580242, 0.0030676457099616528, 0.0062995823100209236, 0.0087822554633021355, 0.0084433592855930328, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 2434, -7148, -8981, -10296, -4043, -30956, -967, -16877, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 3.5053013561991975e-05, 9.7154252216569148e-06, 8.362808330275584e-06, 7.6586129580391571e-06, 1.1982991054537706e-05, 2.4607743398519233e-05, 3.4305685403523967e-05, 3.2981872209347785e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -51,-6,-69,32,-46,-85,-2,72, 62,-27,-127,-11,-2,-79,10,-10, 80,-51,43,23,3,76,-36,58, 
  /* [1][0][][] */ -6,35,-56,-24,-2,-10,-17,83, -21,-21,-78,3,-7,56,0,11, 127,33,9,35,30,-13,-83,25, 
  /* [2][0][][] */ 16,30,-33,-17,4,49,-21,-39, 71,2,-33,25,7,-14,-69,127, 17,-19,-27,-33,1,-23,-26,56, 
  /* [3][0][][] */ -24,13,2,5,-4,34,44,127, 4,-6,9,31,36,16,-26,105, 0,-24,16,3,-25,5,10,-1, 
  /* [4][0][][] */ -119,38,58,8,49,-115,-22,99, -118,-3,14,-15,-5,-126,18,65, -25,-39,80,62,19,127,-36,76, 
  /* [5][0][][] */ -3,-15,-33,10,19,32,36,79, 54,-18,-20,15,11,6,-80,-14, -13,0,16,-4,10,-20,-14,127, 
  /* [6][0][][] */ 1,14,17,38,-5,-14,-44,127, 95,-7,10,-31,13,74,45,-101, -21,29,4,-12,25,-17,-65,9, 
  /* [7][0][][] */ -84,-18,27,-11,-40,48,64,82, 75,-28,-15,10,1,10,-79,-90, -41,-32,-10,7,21,-15,-30,127, 
  /* [8][0][][] */ -127,-34,12,-7,5,-49,58,-18, -99,-3,-37,33,29,-31,105,109, 52,-34,13,-39,-16,-45,51,54, 
  /* [9][0][][] */ -34,-22,7,-5,19,59,-15,-19, -37,29,47,-34,-24,-5,90,-73, -22,-9,46,5,30,-3,30,127, 
  /* [10][0][][] */ 62,42,-47,-6,-33,-80,51,-12, 127,30,-29,9,-2,8,88,-95, -5,2,-9,-32,-31,4,11,-60, 
  /* [11][0][][] */ -8,-9,-3,9,-3,-13,100,5, -12,9,7,-6,-12,-17,-5,7, -7,4,-13,10,12,-18,127,-10, 
  /* [12][0][][] */ -16,7,-52,-13,16,64,41,29, -55,2,39,2,35,-58,-12,127, 54,20,-21,-30,-24,18,1,72, 
  /* [13][0][][] */ -5,3,-15,9,-10,-18,56,-2, -9,-4,3,-2,6,-17,-12,-7, -12,-14,-12,8,0,-11,127,-3, 
  /* [14][0][][] */ -37,-2,3,20,-51,56,34,-79, -15,5,-24,3,27,-28,-18,-59, 3,26,24,-27,-2,-14,48,127, 
  /* [15][0][][] */ 127,10,-3,21,0,-35,-43,-4, -23,5,0,-23,31,1,59,-32, 5,-24,27,-26,-20,-5,84,40, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0070960372686386108, 0.0075157997198402882, 0.0084955496713519096, 0.0085068894550204277, 0.0040247095748782158, 0.010069352574646473, 0.0070655029267072678, 0.0076442253775894642, 0.0080104749649763107, 0.0066401092335581779, 0.0083874007686972618, 0.021820105612277985, 0.0057398867793381214, 0.019101781770586967, 0.0080160060897469521, 0.0084453588351607323, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -2407, -3155, -2239, -2618, -3081, -1732, -3326, -2938, 512, -3424, -3385, 538, -2310, 662, -1532, -647, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 7.9903227742761374e-05, 8.4629864431917667e-05, 9.5662107923999429e-05, 9.5789793704170734e-05, 4.5319280616240576e-05, 0.00011338353942846879, 7.9559402365703136e-05, 8.6075968283694237e-05, 9.0200039267074317e-05, 7.4769362981896847e-05, 9.4444323622155935e-05, 0.00024570006644353271, 6.463262252509594e-05, 0.00021509104408323765, 9.0262321464251727e-05, 9.5096940640360117e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*400] = { 
  -49, -106, -127, -46, -22, -78, -71, -72, -44, -76, -68, 2, -84, 6, -63, -24, -51, -7, -21, -11, -39, 6, -11, -10, -6, 0, -38, 16, 15, 34, 10, -28, -35, -3, -11, 26, -36, -6, 19, -5, -34, -5, 4, 18, -8, 9, -2, -1, -54, -13, -10, -14, -45, -10, -18, 8, 20, 10, -4, 31, 4, 17, -20, 6, -52, -53, -27, -45, -32, -47, -59, -19, 20, -54, -43, 20, -26, 32, -39, -15, -16, 8, -16, -36, -2, -24, 33, -46, 18, -65, 17, 8, -10, 24, -40, 8, -15, -4, -6, 20, 15, 17, 27, 3, 33, 22, -27, 25, 7, 2, 7, -16, -35, -46, -23, 11, -33, -21, -20, 6, 50, 24, -38, 52, 20, 45, 49, -5, -32, 3, -9, 14, -13, -7, -10, 21, 37, -2, -13, 49, -21, 59, 1, -8, -7, -14, -1, -1, 7, 4, 16, -13, 25, -8, 2, 3, -24, 5, -4, -2, -54, -9, -11, -2, -31, 7, -19, 15, 9, -16, -30, 25, -22, 17, 17, -4, 5, 28, -16, -4, -3, -17, 21, -23, 6, 4, 34, 36, -6, 20, -6, -12, -62, -12, -2, -5, -66, 6, -14, 12, 8, 5, 67, 22, 8, 21, 20, 13, -24, -29, -29, -4, -31, -30, -16, -24, -7, -12, 27, 28, -12, 32, -51, 28, -37, 44, -16, -2, -59, 23, 42, 18, 13, 28, 8, 7, -2, -3, 13, 20, -19, 5, 7, -3, -37, -34, -28, -12, -22, 24, 124, 5, -4, 26, 6, 54, -24, -4, 2, -3, -45, 0, -23, -15, 3, 0, 0, 9, 22, 0, 34, 34, -26, -71, -9, -1, -30, -2, -27, -4, 2, -17, -33, 26, -11, 15, -7, 16, -16, 29, -22, -1, 12, -1, 9, 15, 32, 5, -6, 56, 18, 44, -26, 1, -19, -24, -24, 8, -18, 24, 14, 27, 16, 12, -63, 61, -27, 45, 35, 0, -54, -12, -40, -3, -14, -16, -18, 0, 25, -27, -51, 48, -19, 36, -36, -8, 3, 3, 9, 11, -14, 12, -18, 15, -5, 14, 12, 30, -12, -9, 14, -5, 5, -23, -30, -23, -40, -13, -31, -6, -1, 4, 72, 26, -2, -4, 14, 16, -23, -22, -27, -7, -34, -26, -3, -23, 36, -27, 31, 31, -20, 15, 0, 22, 27, 17, -27, -29, 10, -26, 13, -31, -40, -16, 68, 7, 9, 19, -8, -4, 
  52, 83, 125, 46, 33, 76, 82, 79, 47, 80, 69, 1, 84, -5, 59, 11, 60, -1, 35, 13, 33, -2, 4, 7, -11, -7, 59, -24, -13, -28, -6, 43, 33, 5, 14, -36, 37, -8, -10, 1, 20, 14, 1, -2, 1, -21, 11, 7, 63, 14, 18, 24, 46, 9, 13, 3, -13, -26, 17, -32, -3, -35, 21, 2, 45, 59, 23, 21, 30, 36, 69, 28, -21, 35, 33, -19, 20, -26, 28, 10, 6, -4, 30, 26, -6, 17, -18, 40, -29, 49, -19, -25, 5, -19, 42, -8, 22, 18, 26, -18, -16, -17, -10, -4, -21, -18, 26, -23, -22, -7, -3, 16, 40, 37, 25, -13, 25, 3, 21, 1, -39, -23, 42, -41, -25, -51, -43, 4, 31, -4, 13, -1, 20, 1, 9, -14, -19, 2, 26, -42, 21, -46, -1, 8, 9, 3, 10, 18, 3, -9, -17, 6, -11, 13, 11, 1, 32, -10, 13, -16, 53, 18, 26, 10, 38, -11, 18, -1, -29, 1, 44, -32, 3, -9, 2, -6, 7, -17, 17, 13, -16, 11, -8, 24, -27, 13, -33, -28, 3, -16, -1, 12, 63, 13, -8, -7, 83, -12, 16, -16, 8, -13, -63, -14, -2, -20, -19, -3, 41, 20, 41, 1, 25, 19, 18, 27, -13, 18, -33, -35, 18, -36, 42, -28, 44, -45, 25, 13, 79, -8, -38, -26, -11, -13, -10, -14, 5, -16, 1, -7, 8, -1, 0, 17, 26, 35, 13, 11, 21, -8, -119, -18, 6, -24, -2, -59, 44, 8, 15, 11, 39, 22, 34, 10, -12, 2, -20, -16, -19, -9, -20, -33, 29, 71, -9, -2, 11, 0, 40, 5, -18, 14, 40, -32, 7, -24, 8, -18, 20, -30, 28, 4, -28, -7, -19, -10, -45, -1, 29, -52, -15, -61, 25, 17, 1, 30, 22, -23, 11, -29, 6, -34, -22, -22, 73, -64, 47, -43, -59, 4, 47, 34, 36, -3, 21, 17, 3, 12, -36, 20, 47, -58, 18, -20, 20, 5, -5, -14, -15, 3, 6, -3, 15, -4, -3, -27, 2, -7, 12, -9, -24, 2, 11, 42, 37, 9, 34, 12, 25, 6, -5, -3, -61, -16, -11, 10, -4, -17, 40, 0, 25, 1, 32, 22, 7, 23, -32, 16, -33, -28, 21, -31, 19, -16, -25, -15, 36, 31, -4, 44, -13, 28, 59, 11, -64, 7, 10, -14, 11, 20, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0099826371297240257, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { 1048, -1048, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00028966815443709493, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.011260260827839375, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.011260260827839375, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.011260260827839375, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.011260260827839375, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.029017198830842972, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.029017198830842972, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.029017198830842972, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.029017198830842972, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.25079679489135742, } };
const TfArray<1, int> quant21_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
